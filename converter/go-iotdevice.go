package converter

import (
	"encoding/json"
	"log"
	"strings"
	"time"
)

type goIotdeviceTelemetryMessage struct {
	Time          string
	NextTelemetry string
	Model         string
	NumericValues map[string]goIotdeviceNumericTelemetryValue
	TextValues    map[string]goIotdeviceTextTelemetryValue
	EnumValues    map[string]EnumTelemetryValue
}

type goIotdeviceNumericTelemetryValue struct {
	Category    string  `json:"Cat"`
	Description string  `json:"Desc"`
	Value       float64 `json:"Val"`
	Unit        string  `json:"Unit,omitempty"`
}

type goIotdeviceTextTelemetryValue struct {
	Category    string `json:"Cat"`
	Description string `json:"Desc"`
	Value       string `json:"Val"`
}

type EnumTelemetryValue struct {
	Category    string `json:"Cat"`
	Description string `json:"Desc"`
	EnumIdx     int    `json:"Idx"`
	Value       string `json:"Val"`
}

func init() {
	registerHandler("go-iotdevice", goIotdeviceHandler)
}

// parses messages generated by the go-iotdevices tool in the format given by goVeSensorTelemetryMessage
// and write one point per value to the influxdb
func goIotdeviceHandler(c Config, tm TopicMatcher, input Input, outputFunc OutputFunc) {
	// use our time
	timeStamp := time.Now()

	// parse topic
	device, err := tm.MatchDevice(input.Topic())
	if err != nil {
		log.Printf("go-iotdevice[%s]: cannot extract device from topic='%s err=%s", c.Name(), input.Topic(), err)
		return
	}

	// parse payload
	var message goIotdeviceTelemetryMessage
	if err := json.Unmarshal(input.Payload(), &message); err != nil {
		log.Printf("go-iotdevice[%s]: cannot json decode: %s", c.Name(), err)
		return
	}

	if sentClock, err := parseTimeWithZone(message.Time); err == nil {
		outputFunc(stateClockOutputMessage{
			timeStamp: timeStamp,
			device:    device,
			value:     sentClock,
		})
	} else {
		log.Printf("go-iotdevice[%s]: cannot parse time='%s': %s", c.Name(), message.Time, err)
	}

	// only use SmartShunt, SmartSolar etc. as sensor variable
	sensor := strings.Split(message.Model, " ")[0]

	for field, value := range message.NumericValues {
		outputFunc(telemetryOutputMessage{
			timeStamp:  timeStamp,
			device:     device,
			field:      field,
			unit:       &value.Unit,
			sensor:     sensor,
			floatValue: &value.Value,
			auxTags: &map[string]string{
				"category":    value.Category,
				"description": value.Description,
			},
		})
	}

	for field, value := range message.TextValues {
		outputFunc(telemetryOutputMessage{
			timeStamp:   timeStamp,
			device:      device,
			field:       field,
			unit:        nil,
			sensor:      sensor,
			stringValue: &value.Value,
			auxTags: &map[string]string{
				"category":    value.Category,
				"description": value.Description,
			},
		})
	}

	for field, value := range message.EnumValues {
		i := int64(value.EnumIdx)

		outputFunc(telemetryOutputMessage{
			timeStamp:   timeStamp,
			device:      device,
			field:       field,
			unit:        nil,
			sensor:      sensor,
			intValue:    &i,
			stringValue: &value.Value,
			auxTags: &map[string]string{
				"category":    value.Category,
				"description": value.Description,
			},
		})
	}
}
